<?php

/**
 * @file
 * Use AI to summarize documents.
 */

use Aws\Credentials\Credentials;
use Aws\S3\S3Client;
use Aws\Signature\SignatureV4;
use Aws\Textract\TextractClient;
use Drupal\block\Entity\Block;
use Drupal\content_moderation\Entity\ContentModerationState;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Psr7\Request;
use PhpOffice\PhpWord\IOFactory;
use Symfony\Component\Process\Process;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ocha_ai_summarize_node_insert(EntityInterface $entity) {
  ocha_ai_summarize_node_update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ocha_ai_summarize_node_update(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'summary':
      ocha_ai_summarize_node_update_summary($entity);
      break;

    case 'action_points':
      ocha_ai_summarize_node_update_action_points($entity);
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ocha_ai_summarize_node_update_summary(EntityInterface $entity) {
  if ($entity->bundle() !== 'summary') {
    return;
  }

  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');

  // Check to see if the content is moderated or not.
  $is_moderated = $moderation_info->isModeratedEntity($entity);

  if (!$is_moderated) {
    return;
  }

  $current_state = $entity->moderation_state->value;
  $automatic_mode = $entity->field_automatic_mode->value;

  if (!$current_state) {
    return;
  }

  $queue_name = '';
  switch ($current_state) {
    case 'document_uploaded':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'extract_text');
        $entity->save();
      }
      break;

    case 'extract_text':
      $queue_name = 'ocha_ai_summarize_extract_text';
      break;

    case 'text_extracted':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'summarize');
        $entity->save();
      }
      break;

    case 'summarize':
      $queue_name = 'ocha_ai_summarize_summarize';
      break;
  }

  if (empty($queue_name)) {
    return;
  }

  $queue = \Drupal::service('queue')->get($queue_name);
  $item = new \stdClass();
  $item->nid = $entity->id();
  $item->brain = $entity->get('field_ai_brain')->value;
  $item->num_paragraphs = $entity->get('field_number_of_paragraphs')->value ?? 3;
  $queue->createItem($item);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ocha_ai_summarize_node_update_action_points(EntityInterface $entity) {
  if ($entity->bundle() !== 'action_points') {
    return;
  }

  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');

  // Check to see if the content is moderated or not.
  $is_moderated = $moderation_info->isModeratedEntity($entity);

  if (!$is_moderated) {
    return;
  }

  $current_state = $entity->moderation_state->value;
  $automatic_mode = $entity->field_automatic_mode->value;

  if (!$current_state) {
    return;
  }

  $queue_name = '';
  switch ($current_state) {
    case 'document_uploaded':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'extract_text');
        $entity->save();
      }
      break;

    case 'extract_text':
      $queue_name = 'ocha_ai_summarize_extract_text';
      break;

    case 'text_extracted':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'action_points');
        $entity->save();
      }
      break;

    case 'action_points':
      $queue_name = 'ocha_ai_summarize_action_points';
      break;
  }

  if (empty($queue_name)) {
    return;
  }

  $queue = \Drupal::service('queue')->get($queue_name);
  $item = new \stdClass();
  $item->nid = $entity->id();
  $item->brain = $entity->get('field_ai_brain')->value;
  $queue->createItem($item);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_summary_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_summary_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_summary_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_summary_alter($form, $form_state, $form_id);
}

/**
 * Alter summary form based on state.
 */
function ocha_ai_summarize_form_node_summary_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_summary_form') {
    $form['field_document_text']['#access'] = FALSE;
    $form['field_summary']['#access'] = FALSE;
    $form['moderation_state']['#access'] = FALSE;
    $form['moderation_state']['widget'][0]['state']['#default_value'] = 'document_uploaded';
    return;
  }

  $node = $form_state->getFormObject()->getEntity();
  $current_state = $node->moderation_state->value;
  if (!$current_state) {
    return;
  }

  switch ($current_state) {
    case 'draft':
    case 'document_uploaded':
    case 'extract_text':
      $form['field_document_text']['#access'] = FALSE;
      $form['field_summary']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      break;

    case 'text_extracted':
      $form['field_summary']['#access'] = FALSE;
      break;

    case 'summarize':
      $form['field_number_of_paragraphs']['#disabled'] = TRUE;
      $form['field_document_text']['#disabled'] = TRUE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_summary']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      break;

    case 'summarized':
      $form['field_number_of_paragraphs']['#disabled'] = TRUE;
      $form['field_document_text']['#disabled'] = TRUE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_summary']['#disabled'] = TRUE;
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_action_points_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_action_points_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_action_points_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_action_points_alter($form, $form_state, $form_id);
}

/**
 * Alter action_points form based on state.
 */
function ocha_ai_summarize_form_node_action_points_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_action_points_form') {
    $form['field_document_text']['#access'] = FALSE;
    $form['field_action_points']['#access'] = FALSE;
    $form['moderation_state']['#access'] = FALSE;
    $form['moderation_state']['widget'][0]['state']['#default_value'] = 'document_uploaded';
    return;
  }

  $node = $form_state->getFormObject()->getEntity();
  $current_state = $node->moderation_state->value;
  if (!$current_state) {
    return;
  }

  switch ($current_state) {
    case 'draft':
    case 'document_uploaded':
    case 'extract_text':
      $form['field_document_text']['#access'] = FALSE;
      $form['field_action_points']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      break;

    case 'text_extracted':
      $form['field_action_points']['#access'] = FALSE;
      break;

    case 'action_points':
      $form['field_document_text']['#disabled'] = TRUE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_action_points']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      break;

    case 'action_points_created':
      $form['field_document_text']['#disabled'] = TRUE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_action_points']['#disabled'] = TRUE;
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  switch ($entity->bundle()) {
    case 'summary':
      ocha_ai_summarize_node_view_summary($build, $entity, $display, $view_mode);
      break;

    case 'action_points':
      ocha_ai_summarize_node_view_action_points($build, $entity, $display, $view_mode);
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_summary(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() !== 'summary') {
    return;
  }

  if ($entity->isPublished()) {
    return;
  }

  $content_moderation_state = ContentModerationState::loadFromModeratedEntity($entity);
  if (!$content_moderation_state) {
    $active = 'document_uploaded';
  }
  else {
    $active = $content_moderation_state->get('moderation_state')->value;
  }

  $states = [
    'document_uploaded' => [
      '#markup' => 'Document uploaded',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'extract_text' => [
      '#markup' => 'Extract text',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'text_extracted' => [
      '#markup' => 'Text extracted',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'summarize' => [
      '#markup' => 'Summarize',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'summarized' => [
      '#markup' => 'Summarized',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
  ];

  $future = FALSE;
  foreach ($states as $key => &$state) {
    if ($key == $active) {
      $state['#wrapper_attributes']['class'] = ['active'];
      $future = TRUE;
    }
    else {
      if (!$future) {
        $state['#wrapper_attributes']['class'] = ['done'];
      }
      else {
        $state['#wrapper_attributes']['class'] = ['to-do'];
      }
    }
  }

  $build['workflow'] = [
    '#theme' => 'item_list',
    '#attributes' => [
      'class' => [
        'workflow-steps',
      ],
    ],
    '#list_type' => 'ol',
    '#items' => array_values($states),
    '#weight' => -100,
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_action_points(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() !== 'action_points') {
    return;
  }

  if ($entity->isPublished()) {
    return;
  }

  $content_moderation_state = ContentModerationState::loadFromModeratedEntity($entity);
  if (!$content_moderation_state) {
    $active = 'document_uploaded';
  }
  else {
    $active = $content_moderation_state->get('moderation_state')->value;
  }

  $states = [
    'document_uploaded' => [
      '#markup' => 'Document uploaded',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'extract_text' => [
      '#markup' => 'Extract text',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'text_extracted' => [
      '#markup' => 'Text extracted',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'action_points' => [
      '#markup' => 'Get action points',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'action_points_created' => [
      '#markup' => 'Action points created',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
  ];

  $future = FALSE;
  foreach ($states as $key => &$state) {
    if ($key == $active) {
      $state['#wrapper_attributes']['class'] = ['active'];
      $future = TRUE;
    }
    else {
      if (!$future) {
        $state['#wrapper_attributes']['class'] = ['done'];
      }
      else {
        $state['#wrapper_attributes']['class'] = ['to-do'];
      }
    }
  }

  $build['workflow'] = [
    '#theme' => 'item_list',
    '#attributes' => [
      'class' => [
        'workflow-steps',
      ],
    ],
    '#list_type' => 'ol',
    '#items' => array_values($states),
    '#weight' => -100,
  ];
}

/**
 * Get number of pages in a PDF file.
 */
function ocha_ai_summarize_get_num_pages($filename) {
  $command = [
    'pdfinfo',
    $filename,
  ];

  $process = new Process($command);
  $process->setTimeout(10);
  $process->run();
  if (!$process->isSuccessful()) {
    \Drupal::logger('AI Summarize')->error('PDF Info failed: ' . $process->getErrorOutput());
    return FALSE;
  }

  $output = trim($process->getOutput(), " \t\n\r\0\x0B\x0C");

  $matches = [];
  preg_match('/Pages:\s+([\d]+)/', $output, $matches);
  return $matches[1];
}

/**
 * Extract text for each page separately.
 */
function ocha_ai_summarize_extract_pages_from_doc($filename) {
  $reader_name = '';
  $file_parts = pathinfo($filename);
  switch (strtolower($file_parts['extension'])) {
    case 'docx':
      $reader_name = 'Word2007';
      break;

    case 'rtf':
      $reader_name = 'RTF';
      break;

    case 'odt':
      $reader_name = 'ODText';
      break;
  }

  if (empty($reader_name)) {
    return;
  }

  $phpWord = IOFactory::load($filename, $reader_name);

  $pages = [];
  foreach ($phpWord->getSections() as $section) {
    $text = '';
    foreach ($section->getElements() as $element) {
      if (method_exists($element, 'getElements')) {
        foreach ($element->getElements() as $child_element) {
          if (method_exists($child_element, 'getText')) {
            $text .= $child_element->getText() . ' ';
          }
          elseif (method_exists($child_element, 'getContent')) {
            $text .= $child_element->getContent() . ' ';
          }
        }
      }
      elseif (method_exists($element, 'getText')) {
        $text .= $element->getText() . "\n";
      }
    }

    $pages[] = $text;
  }

  return $pages;
}

/**
 * Extract text for each page separately.
 */
function ocha_ai_summarize_extract_pages_from_pdf_ocr($filename) {
  /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
  $fileSystem = \Drupal::service('file_system');

  // Create temp file location.
  $dir = 'temporary://' . md5($filename);
  $fileSystem->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY || FileSystemInterface::MODIFY_PERMISSIONS);
  $absolute_path = $fileSystem->realpath($dir);

  // Convert PDF to png.
  $command = [
    'gs',
    '-dBATCH',
    '-dFILTERIMAGE',
    '-dNOPAUSE',
    '-sDEVICE=pnggray',
    '-r600',
    '-dUseCropBox',
    '-sOutputFile=' . $absolute_path . '/page-%04d.png',
    $filename,
  ];

  $process = new Process($command);
  $process->setTimeout(0);
  $process->setWorkingDirectory($dir);
  $process->run();

  if (!$process->isSuccessful()) {
    \Drupal::logger('AI Summarize')->error('PDF Extraction failed: ' . $process->getErrorOutput());
    return FALSE;
  }

  // Run OCR on the files.
  $files = $fileSystem->scanDirectory($absolute_path, '/png$/');
  asort($files);
  foreach ($files as $file) {
    $command = [
      'tesseract',
      '--dpi',
      '600',
      $file->uri,
      $file->uri,
    ];

    $process = new Process($command);
    $process->setTimeout(0);
    $process->setWorkingDirectory($dir);
    $process->run();

    if (!$process->isSuccessful()) {
      \Drupal::logger('AI Summarize')->error('PDF Extraction failed: ' . $process->getErrorOutput());
      return FALSE;
    }

    $fileSystem->delete($file->uri);
  }

  // Combine all pages into one.
  $files = $fileSystem->scanDirectory($absolute_path, '/png.txt$/');
  asort($files);
  $text = '';
  foreach ($files as $file) {
    $text .= file_get_contents($file->uri);
    $text .= "\n";

    $fileSystem->delete($file->uri);
  }

  return $text;
}

/**
 * Extract text for each page separately.
 */
function ocha_ai_summarize_extract_pages_from_pdf($filename) {
  $pages = [];
  $num_pages = ocha_ai_summarize_get_num_pages($filename);

  foreach (range(1, $num_pages) as $page_num) {
    $command = [
      'pdftotext',
      '-f',
      $page_num,
      '-l',
      $page_num,
      $filename,
      '-',
    ];

    $process = new Process($command);
    $process->setTimeout(10);
    $process->run();
    if (!$process->isSuccessful()) {
      \Drupal::logger('AI Summarize')->error('PDF Extraction failed: ' . $process->getErrorOutput());
      return FALSE;
    }

    $output = trim($process->getOutput(), " \t\n\r\0\x0B\x0C");

    // Remove tabs.
    $text = str_replace(["\t"], '', $output);

    // Keep lists as is.
    $text = str_replace([
      "\n➢",
      "\n▪",
      "\n-",
      "\n*",
      "\no\n",
    ], [
      "||||➢",
      "||||▪",
      "||||-",
      "||||*",
      "||||o ",
    ], $text);

    // Two new lines make a paragraph.
    $text = str_replace("\n\n", '|||', $text);

    // Remove single line feeds.
    $text = str_replace("\n", ' ', $text);

    // Re-add lists.
    $text = str_replace('||||', "\n", $text);

    // Re-add paragraphs.
    $text = str_replace('|||', "\n\n", $text);

    $pages[] = $text;
  }

  return $pages;
}

/**
 * Upload file to S3.
 */
function ocha_ai_summarize_upload_to_s3($file_name) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $access_key = $config->get('bedrock_access_key');
  $secret_key = $config->get('bedrock_secret_key');

  $client = new S3Client([
    'credentials' => [
      'key' => $access_key,
      'secret' => $secret_key,
    ],
    'region' => 'us-east-1',
  ]);

  $bucket_name = 'ai-summarize-pdfs';
  $key_name = basename($file_name);

  $client->putObject([
    'Bucket' => $bucket_name,
    'Key' => $key_name,
    'SourceFile' => $file_name,
  ]);
}

/**
 * Extract text using AWS Textract.
 */
function ocha_ai_summarize_texttract($file_name) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $access_key = $config->get('bedrock_access_key');
  $secret_key = $config->get('bedrock_secret_key');

  $client = new TextractClient([
    'region' => 'us-east-1',
    'credentials' => [
      'key' => $access_key,
      'secret' => $secret_key,
    ],
  ]);

  $bucket_name = 'ai-summarize-pdfs';
  $key_name = basename($file_name);

  $options = [
    'DocumentLocation' => [
      'S3Object' => [
        'Bucket' => $bucket_name,
        'Name' => $key_name,
      ],
    ],
    'FeatureTypes' => [
      'LAYOUT',
    ],
  ];

  $result = $client->startDocumentTextDetection($options);
  $job_id = $result->get('JobId');
  return $job_id;
}

/**
 * Get extracted text using AWS Textract.
 */
function ocha_ai_summarize_texttract_get_text($job_id) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $access_key = $config->get('bedrock_access_key');
  $secret_key = $config->get('bedrock_secret_key');

  $client = new TextractClient([
    'region' => 'us-east-1',
    'credentials' => [
      'key' => $access_key,
      'secret' => $secret_key,
    ],
  ]);

  $options = [
    'JobId' => $job_id,
  ];

  $result = $client->GetDocumentTextDetection($options);
  $blocks = $result->get('Blocks');
  $status = $result->get('JobStatus');

  if ($status == 'SUCCEEDED') {
    $output = '';

    // Concatenate.
    foreach ($blocks as $value) {
      if (isset($value['BlockType']) && $value['BlockType']) {
        $blockType = $value['BlockType'];
        if (isset($value['Text']) && $value['Text']) {
          $text = $value['Text'];
          if ($blockType == 'WORD') {
            $output .= ' ' . $text;
          }
          elseif ($blockType == 'LINE') {
            $output .= "\n" . $text;
          }
        }
      }
    }

    $output .= "\n";
    return $output;
  }

  return '';
}

/**
 * Make chat call to OpenAi.
 */
function ocha_ai_summarize_http_call_openai($query) {
  $config = \Drupal::config('ocha_ai_summarize.settings');

  $http_client = \Drupal::httpClient();
  $url = 'https://api.openai.com/v1/chat/completions';

  $headers = [
    'Content-Type' => 'application/json',
    'Authorization' => 'Bearer ' . $config->get('openai_token'),
  ];

  try {
    $response = $http_client->request(
      'POST',
      $url,
      [
        'timeout' => 600,
        'headers' => $headers,
        'json' => $query,
      ],
    );

    $body = $response->getBody() . '';
    return json_decode($body, TRUE);
  }
  catch (ClientException $e) {
    \Drupal::logger('AI - OpenAI')->error($e->getMessage());
  }
  catch (Exception $e) {
    \Drupal::logger('AI - OpenAI')->error($e->getMessage());
  }

  return '';
}

/**
 * Make chat call to Azure.
 */
function ocha_ai_summarize_http_call_azure($query) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $endpoint = $config->get('azure_endpoint');
  $key = $config->get('azure_apikey');

  $http_client = \Drupal::httpClient();

  $headers = [
    'Content-Type' => 'application/json',
    'API-KEY' => $key,
  ];

  try {
    $response = $http_client->request(
      'POST',
      $endpoint,
      [
        'timeout' => 600,
        'headers' => $headers,
        'json' => $query,
      ],
    );

    $body = $response->getBody() . '';
    return json_decode($body, TRUE);
  }
  catch (ClientException $e) {
    \Drupal::logger('AI - Azure')->error($e->getMessage());
  }
  catch (Exception $e) {
    \Drupal::logger('AI - Azure')->error($e->getMessage());
  }

  return '';
}

/**
 * Make chat call to BedRock.
 */
function ocha_ai_summarize_http_call_bedrock($prompt) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $endpoint = $config->get('bedrock_endpoint');
  $access_key = $config->get('bedrock_access_key');
  $secret_key = $config->get('bedrock_secret_key');
  $model = $config->get('bedrock_model');

  $headers = [
    'timeout' => 600,
    'Content-Type' => 'application/json',
    'Accept' => 'application/json',
    'modelId' => $model,
  ];

  $version = '1.1';

  $body = [
    'inputText' => $prompt,
    'textGenerationConfig' => [
      'maxTokenCount' => 4000,
      'stopSequences' => [],
      'temperature' => 0,
      'topP' => 1,
    ],
  ];

  $client = new Client([
    'timeout' => 30,
  ]);

  try {
    $request = new Request('POST', $endpoint, $headers, json_encode($body), $version);

    $region = 'us-east-1';
    $service = 'bedrock';
    $signature = new SignatureV4($service, $region);
    $credentials = new Credentials($access_key, $secret_key);

    $request = $signature->signRequest($request, $credentials);
    $response = $client->send($request);

    $body = $response->getBody() . '';
    return json_decode($body, TRUE);
  }
  catch (ClientException $e) {
    \Drupal::logger('AI - BedRock')->error($e->getMessage());
  }
  catch (Exception $e) {
    \Drupal::logger('AI - BedRock')->error($e->getMessage());
  }

  return '';
}

/**
 * Make chat call to Claude.
 */
function ocha_ai_summarize_http_call_claude($prompt) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $endpoint = $config->get('claude_endpoint');
  $api_key = $config->get('claude_api_key');
  $claude_version = $config->get('claude_version');

  $headers = [
    'Content-Type' => 'application/json',
    'Accept' => 'application/json',
    'anthropic-version' => $claude_version,
    'x-api-key' => $api_key,
  ];

  $body = [
    'model' => 'claude-2',
    'prompt' => $prompt,
    "stop_sequences" => [
      "\\n\\nHuman:",
    ],
    'temperature' => 0.1,
    'max_tokens_to_sample' => 2500,
  ];

  $http_client = \Drupal::httpClient();

  try {
    $response = $http_client->request(
      'POST',
      $endpoint,
      [
        'timeout' => 600,
        'headers' => $headers,
        'json' => $body,
      ],
    );

    $body = $response->getBody() . '';
    return json_decode($body, TRUE);
  }
  catch (ClientException $e) {
    \Drupal::logger('AI - Claude')->error($e->getMessage());
  }
  catch (Exception $e) {
    \Drupal::logger('AI - Claude')->error($e->getMessage());
  }

  return '';
}

/**
 * Only show block on final step.
 */
function ocha_ai_summarize_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->id() == 'common_design_subtheme_adminfeedbackblock') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (($node instanceof NodeInterface) && !$node->isPublished()) {
      if ($node->isPublished()) {
        return AccessResult::neutral();
      }

      $current_state = $node->moderation_state->value ?? FALSE;
      if ($current_state != 'summarized' && $current_state != 'action_points_created') {
        return AccessResult::forbiddenIf(TRUE)->addCacheableDependency($block);
      }
    }

    return AccessResult::neutral();
  }
}

/**
 * Check token length and truncate if needed.
 */
function ocha_ai_summarize_check_length($text, $bot) {
  $max_tokens = 42000;

  switch ($bot) {
    case 'openai':
      $max_tokens = 16385;
      break;

    case 'azure_trained':
      $max_tokens = 8192;
      break;

    case 'bedrock':
      $max_tokens = 42000;
      break;
  }

  // 1 token ~= 4 characters.
  if (strlen($text) > 3.5 * $max_tokens) {
    \Drupal::logger('AI - Max tokens')->warning('Too many tokens needed, string truncated.');
    $text = substr($text, 0, round(3.5 * $max_tokens));
  }

  return $text;
}
