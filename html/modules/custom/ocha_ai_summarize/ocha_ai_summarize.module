<?php

/**
 * @file
 * Use AI to summarize documents.
 */

use Aws\BedrockRuntime\BedrockRuntimeClient;
use Aws\S3\S3Client;
use Aws\Sts\StsClient;
use Aws\Textract\TextractClient;
use Drupal\block\Entity\Block;
use Drupal\content_moderation\Entity\ContentModerationState;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\user\UserInterface;
use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Middleware;
use OpenAI\Client;
use PhpOffice\PhpWord\Element\TextRun;
use PhpOffice\PhpWord\IOFactory;
use Psr\Http\Message\ResponseInterface;
use Symfony\Component\Process\Process;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ocha_ai_summarize_node_insert(EntityInterface $entity) {
  ocha_ai_summarize_node_update($entity);

  \Drupal::messenger()->addMessage(t("Your document has been queued for processing and will be ready in 10 to 15 minutes, you'll receive an email when it's ready."));

  // Auto create other nodes?
  /** @var \Drupal\node\Entity\Node $entity */
  if (!$entity->hasField('field_auto_create')) {
    return;
  }

  if ($entity->get('field_auto_create')->value) {
    $current_ai = $entity->get('field_ai_brain')->value;
    $ais = $entity->get('field_ai_brain')->getSettings()['allowed_values'];
    foreach ($ais as $ai => $bot) {
      // Skip openai.
      if ($ai == 'openai') {
        continue;
      }

      if ($ai == $current_ai) {
        continue;
      }

      $new = $entity->createDuplicate();
      $new->set('field_ai_brain', $ai);
      $new->set('title', $new->get('title')->value . ' [' . $bot . ']');
      $new->set('field_auto_create', FALSE);
      $new->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ocha_ai_summarize_node_update(EntityInterface $entity) {
  /** @var \Drupal\node\Entity\Node $entity */
  switch ($entity->bundle()) {
    case 'summary':
      ocha_ai_summarize_node_update_summary($entity);
      break;

    case 'action_points':
      ocha_ai_summarize_node_update_action_points($entity);
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ocha_ai_summarize_node_update_summary(EntityInterface $entity) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'summary') {
    return;
  }

  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');

  // Check to see if the content is moderated or not.
  $is_moderated = $moderation_info->isModeratedEntity($entity);

  if (!$is_moderated) {
    return;
  }

  $current_state = $entity->moderation_state->value;
  $automatic_mode = $entity->field_automatic_mode->value;
  $document_language = $entity->field_document_language->value ?? 'eng';
  $output_language = $entity->field_output_language->value ?? 'eng';

  if (!$current_state) {
    return;
  }

  $queue_name = '';
  switch ($current_state) {
    case 'document_uploaded':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'extract_text');
        $entity->save();
      }
      break;

    case 'extract_text':
      $queue_name = 'ocha_ai_summarize_extract_text';
      break;

    case 'text_extracted':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'summarize');
        $entity->save();
      }
      break;

    case 'summarize':
      $queue_name = 'ocha_ai_summarize_summarize';
      break;
  }

  if (empty($queue_name)) {
    return;
  }

  $queue = \Drupal::service('queue')->get($queue_name);
  $item = new \stdClass();
  $item->nid = $entity->id();
  $item->brain = $entity->get('field_ai_brain')->value;
  $item->language = $document_language;
  $item->output_language = $output_language;
  $item->num_paragraphs = $entity->get('field_number_of_paragraphs')->value ?? 3;
  $item->file_name = ocha_ai_summarize_get_entity_document($entity);

  $queue->createItem($item);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ocha_ai_summarize_node_update_action_points(EntityInterface $entity) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'action_points') {
    return;
  }

  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');

  // Check to see if the content is moderated or not.
  $is_moderated = $moderation_info->isModeratedEntity($entity);

  if (!$is_moderated) {
    return;
  }

  $current_state = $entity->moderation_state->value;
  $automatic_mode = $entity->field_automatic_mode->value;
  $document_language = $entity->field_document_language->value ?? 'eng';
  $output_language = $entity->field_output_language->value ?? 'eng';

  if (!$current_state) {
    return;
  }

  $queue_name = '';
  switch ($current_state) {
    case 'document_uploaded':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'extract_text');
        $entity->save();
      }
      break;

    case 'extract_text':
      $queue_name = 'ocha_ai_summarize_extract_text';
      break;

    case 'text_extracted':
      if ($automatic_mode) {
        $entity->set('moderation_state', 'action_points');
        $entity->save();
      }
      break;

    case 'action_points':
      $queue_name = 'ocha_ai_summarize_action_points';
      break;
  }

  if (empty($queue_name)) {
    return;
  }

  $queue = \Drupal::service('queue')->get($queue_name);
  $item = new \stdClass();
  $item->nid = $entity->id();
  $item->brain = $entity->get('field_ai_brain')->value;
  $item->language = $document_language;
  $item->output_language = $output_language;
  $item->file_name = ocha_ai_summarize_get_entity_document($entity);

  $queue->createItem($item);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#value'] = t('Submit feedback');
  $form['comment_body']['widget'][0]['#title'] = t('Your feedback');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_summary_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_summary_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_summary_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_summary_alter($form, $form_state, $form_id);
}

/**
 * Alter summary form based on state.
 */
function ocha_ai_summarize_form_node_summary_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide revision widget.
  $form['revision_log']['#access'] = FALSE;

  // Remove old Arabic.
  if (isset($form['field_document_language']['widget']['#options']['Arabic'])) {
    unset($form['field_document_language']['widget']['#options']['Arabic']);
  }
  if (isset($form['field_output_language']['widget']['#options']['Arabic'])) {
    unset($form['field_output_language']['widget']['#options']['Arabic']);
  }

  if ($form_id === 'node_summary_form') {
    // Remove OpenAi.
    if (isset($form['field_ai_brain']['widget']['#options']['openai'])) {
      unset($form['field_ai_brain']['widget']['#options']['openai']);
    }

    $form['actions']['submit']['#value'] = t('Generate');
    $form['field_document_text']['#access'] = FALSE;
    $form['field_summary']['#access'] = FALSE;
    $form['moderation_state']['#access'] = FALSE;
    $form['moderation_state']['widget'][0]['state']['#default_value'] = 'document_uploaded';
    return;
  }

  /** @var \Drupal\node\Entity\Node $node */
  $node = $form_state->getFormObject()->getEntity();
  $current_state = $node->moderation_state->value;
  if (!$current_state) {
    return;
  }

  if (isset($form['field_auto_create'])) {
    $form['field_auto_create']['#disabled'] = TRUE;
  }

  switch ($current_state) {
    case 'draft':
    case 'document_uploaded':
    case 'extract_text':
      $form['field_document_text']['#access'] = FALSE;
      $form['field_summary']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      break;

    case 'text_extracted':
      $form['field_summary']['#access'] = FALSE;
      $form['field_document_language']['#access'] = FALSE;
      $form['field_output_language']['#access'] = FALSE;
      break;

    case 'summarize':
      $form['field_number_of_paragraphs']['#disabled'] = TRUE;
      $form['field_document_text']['#disabled'] = TRUE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_summary']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      $form['field_document_language']['#access'] = FALSE;
      $form['field_output_language']['#access'] = FALSE;
      break;

    case 'summarized':
      $form['field_number_of_paragraphs']['#disabled'] = TRUE;
      $form['field_document_text']['#disabled'] = TRUE;
      $form['field_document_language']['#access'] = FALSE;
      $form['field_output_language']['#access'] = FALSE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_summary']['#disabled'] = TRUE;
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_action_points_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_action_points_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ocha_ai_summarize_form_node_action_points_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ocha_ai_summarize_form_node_action_points_alter($form, $form_state, $form_id);
}

/**
 * Alter action_points form based on state.
 */
function ocha_ai_summarize_form_node_action_points_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide revision widget.
  $form['revision_log']['#access'] = FALSE;

  // Remove old Arabic.
  if (isset($form['field_document_language']['widget']['#options']['Arabic'])) {
    unset($form['field_document_language']['widget']['#options']['Arabic']);
  }
  if (isset($form['field_output_language']['widget']['#options']['Arabic'])) {
    unset($form['field_output_language']['widget']['#options']['Arabic']);
  }

  if ($form_id === 'node_action_points_form') {
    // Remove OpenAi.
    if (isset($form['field_ai_brain']['widget']['#options']['openai'])) {
      unset($form['field_ai_brain']['widget']['#options']['openai']);
    }

    $form['actions']['submit']['#value'] = t('Generate');
    $form['field_document_text']['#access'] = FALSE;
    $form['field_action_points']['#access'] = FALSE;
    $form['moderation_state']['#access'] = FALSE;
    $form['moderation_state']['widget'][0]['state']['#default_value'] = 'document_uploaded';
    return;
  }

  /** @var \Drupal\node\Entity\Node $node */
  $node = $form_state->getFormObject()->getEntity();
  $current_state = $node->moderation_state->value;
  if (!$current_state) {
    return;
  }

  switch ($current_state) {
    case 'draft':
    case 'document_uploaded':
    case 'extract_text':
      $form['field_document_text']['#access'] = FALSE;
      $form['field_action_points']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      break;

    case 'text_extracted':
      $form['field_action_points']['#access'] = FALSE;
      $form['field_document_language']['#access'] = FALSE;
      $form['field_output_language']['#access'] = FALSE;
      break;

    case 'action_points':
      $form['field_document_text']['#disabled'] = TRUE;
      $form['field_document_language']['#access'] = FALSE;
      $form['field_output_language']['#access'] = FALSE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_action_points']['#access'] = FALSE;
      $form['moderation_state']['#access'] = FALSE;
      break;

    case 'action_points_created':
      $form['field_document_text']['#disabled'] = TRUE;
      $form['field_document_language']['#access'] = FALSE;
      $form['field_output_language']['#access'] = FALSE;
      unset($form['field_document_text']['widget'][$form['field_document_text']['widget']['#max_delta']]);
      unset($form['field_document_text']['widget']['add_more']);

      $form['field_action_points']['#disabled'] = TRUE;
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\Entity\Node $entity */
  switch ($entity->bundle()) {
    case 'summary':
      ocha_ai_summarize_node_view_moderation_state($build, $entity, $display, $view_mode);
      ocha_ai_summarize_node_view_compare($build, $entity, $display, $view_mode);
      ocha_ai_summarize_node_view_timings($build, $entity, $display, $view_mode);
      break;

    case 'action_points':
      ocha_ai_summarize_node_view_moderation_state($build, $entity, $display, $view_mode);
      ocha_ai_summarize_node_view_action_points_compare($build, $entity, $display, $view_mode);
      ocha_ai_summarize_node_view_timings($build, $entity, $display, $view_mode);
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_timings(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'summary' && $entity->bundle() !== 'action_points') {
    return;
  }

  $timings = ocha_ai_summarize_log_time_get($entity->id());
  if (empty($timings)) {
    return;
  }

  foreach ($timings as $timing) {
    $items[] = $timing->action . ': ' . round($timing->duration / 1000, 2) . 's';
  }

  $build['moderation_state'] = [
    '#title' => t('Execution times'),
    '#theme' => 'item_list',
    '#items' => $items,
    '#weight' => 100,
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_moderation_state(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'summary' && $entity->bundle() !== 'action_points') {
    return;
  }

  if ($entity->isPublished()) {
    return;
  }

  $content_moderation_state = ContentModerationState::loadFromModeratedEntity($entity);
  if (!$content_moderation_state) {
    $state = 'document_uploaded';
  }
  else {
    $state = $content_moderation_state->get('moderation_state')->value;
  }

  // Do not display when in final state.
  if ($state == 'summarized' || $state == 'action_points_created') {
    return;
  }

  /** @var \Drupal\content_moderation\ModerationInformation $moderation_information_service */
  $moderation_information_service = \Drupal::service('content_moderation.moderation_information');
  $workflow = $moderation_information_service->getWorkflowForEntity($entity);
  $label = $workflow->getTypePlugin()->getState($state)->label();
  $label = t('@label (Your document will be ready in 10-15 minutes.)', [
    '@label' => $label,
  ]);

  $build['moderation_state'] = [
    '#type' => 'markup',
    '#markup' => $label,
    '#prefix' => '<div class="field--label-inline moderation-state-label"><div class="field__label">' . t('Status') . '</div><div class="field__item">',
    '#suffix' => '</div></div>',
    '#attributes' => [
      'class' => [
        'cd-button',
      ],
    ],
    '#weight' => -100,
  ];

}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_compare(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'summary') {
    return;
  }

  if ($entity->isPublished()) {
    return;
  }

  $content_moderation_state = ContentModerationState::loadFromModeratedEntity($entity);
  if (!$content_moderation_state) {
    $active = 'document_uploaded';
  }
  else {
    $active = $content_moderation_state->get('moderation_state')->value;
  }

  if ($active == 'summarized' && ocha_ai_summarize_file_is_shared($entity)) {
    $build['compare'] = [
      '#type' => 'link',
      '#title' => t('Compare with other AI models'),
      '#url' => Url::fromRoute('ocha_ai_summarize.compare.summary', [
        'id' => $entity->id(),
      ]),
      '#prefix' => '<div class="node--compare-link">',
      '#suffix' => '</div>',
      '#attributes' => [
        'class' => [
          'cd-button',
        ],
      ],
      '#weight' => 100,
    ];
  }

  if ($entity->hasField('field_ai_feedback') && $active != 'summarized') {
    unset($build['field_ai_feedback']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_action_points_compare(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'action_points') {
    return;
  }

  if ($entity->isPublished()) {
    return;
  }

  $content_moderation_state = ContentModerationState::loadFromModeratedEntity($entity);
  if (!$content_moderation_state) {
    $active = 'document_uploaded';
  }
  else {
    $active = $content_moderation_state->get('moderation_state')->value;
  }

  if ($active == 'action_points_created' && ocha_ai_summarize_file_is_shared($entity)) {
    $build['compare'] = [
      '#type' => 'link',
      '#title' => t('Compare with other AI models'),
      '#url' => Url::fromRoute('ocha_ai_summarize.compare.summary', [
        'id' => $entity->id(),
      ]),
      '#prefix' => '<div class="node--compare-link">',
      '#suffix' => '</div>',
      '#attributes' => [
        'class' => [
          'cd-button',
        ],
      ],
      '#weight' => 100,
    ];
  }

  if ($entity->hasField('field_ai_feedback') && $active != 'action_points_created') {
    unset($build['field_ai_feedback']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_summary(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'summary') {
    return;
  }

  if ($entity->isPublished()) {
    return;
  }

  $content_moderation_state = ContentModerationState::loadFromModeratedEntity($entity);
  if (!$content_moderation_state) {
    $active = 'document_uploaded';
  }
  else {
    $active = $content_moderation_state->get('moderation_state')->value;
  }

  $states = [
    'document_uploaded' => [
      '#markup' => 'Document uploaded',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'extract_text' => [
      '#markup' => 'Extract text',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'text_extracted' => [
      '#markup' => 'Text extracted',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'summarize' => [
      '#markup' => 'Summarize',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'summarized' => [
      '#markup' => 'Summarized',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
  ];

  $future = FALSE;
  foreach ($states as $key => &$state) {
    if ($key == $active) {
      $state['#wrapper_attributes']['class'] = ['active'];
      $future = TRUE;
    }
    else {
      if (!$future) {
        $state['#wrapper_attributes']['class'] = ['done'];
      }
      else {
        $state['#wrapper_attributes']['class'] = ['to-do'];
      }
    }
  }

  $build['workflow'] = [
    '#theme' => 'item_list',
    '#attributes' => [
      'class' => [
        'workflow-steps',
      ],
    ],
    '#list_type' => 'ol',
    '#items' => array_values($states),
    '#weight' => -100,
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ocha_ai_summarize_node_view_action_points(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->bundle() !== 'action_points') {
    return;
  }

  if ($entity->isPublished()) {
    return;
  }

  $content_moderation_state = ContentModerationState::loadFromModeratedEntity($entity);
  if (!$content_moderation_state) {
    $active = 'document_uploaded';
  }
  else {
    $active = $content_moderation_state->get('moderation_state')->value;
  }

  $states = [
    'document_uploaded' => [
      '#markup' => 'Document uploaded',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'extract_text' => [
      '#markup' => 'Extract text',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'text_extracted' => [
      '#markup' => 'Text extracted',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'action_points' => [
      '#markup' => 'Get action points',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
    'action_points_created' => [
      '#markup' => 'Action points created',
      '#wrapper_attributes' => [
        'class' => [],
      ],
    ],
  ];

  $future = FALSE;
  foreach ($states as $key => &$state) {
    if ($key == $active) {
      $state['#wrapper_attributes']['class'] = ['active'];
      $future = TRUE;
    }
    else {
      if (!$future) {
        $state['#wrapper_attributes']['class'] = ['done'];
      }
      else {
        $state['#wrapper_attributes']['class'] = ['to-do'];
      }
    }
  }

  $build['workflow'] = [
    '#theme' => 'item_list',
    '#attributes' => [
      'class' => [
        'workflow-steps',
      ],
    ],
    '#list_type' => 'ol',
    '#items' => array_values($states),
    '#weight' => -100,
  ];
}

/**
 * Check if source file is used by multiple nodes.
 */
function ocha_ai_summarize_file_is_shared($node) {
  /** @var \Drupal\node\Entity\Node $nodes[] */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => $node->bundle(),
      'field_document.target_id' => $node->get('field_document')->target_id,
    ]);

  return count($nodes) > 1;
}

/**
 * Get number of pages in a PDF file.
 */
function ocha_ai_summarize_get_num_pages($filename) {
  $command = [
    'pdfinfo',
    $filename,
  ];

  \Drupal::logger('AI Summarize')->info('PDF Info: ' . implode(' ', $command));

  $process = new Process($command);
  $process->setTimeout(10);
  $process->run();
  if (!$process->isSuccessful()) {
    \Drupal::logger('AI Summarize')->error('PDF Info failed: ' . $process->getErrorOutput());
    return FALSE;
  }

  $output = trim($process->getOutput(), " \t\n\r\0\x0B\x0C");

  $matches = [];
  preg_match('/Pages:\s+([\d]+)/', $output, $matches);
  return $matches[1];
}

/**
 * Extract text for each page separately.
 */
function ocha_ai_summarize_extract_pages_from_doc($filename, $document_language = 'eng') {
  $reader_name = '';
  $file_parts = pathinfo($filename);
  switch (strtolower($file_parts['extension'])) {
    case 'docx':
      $reader_name = 'Word2007';
      break;

    case 'rtf':
      $reader_name = 'RTF';
      break;

    case 'odt':
      $reader_name = 'ODText';
      break;
  }

  if (empty($reader_name)) {
    return;
  }

  $phpWord = IOFactory::load($filename, $reader_name);

  $pages = [];
  foreach ($phpWord->getSections() as $section) {
    $text = '';
    foreach ($section->getElements() as $element) {
      if (method_exists($element, 'getElements')) {
        foreach ($element->getElements() as $child_element) {
          if (method_exists($child_element, 'getText')) {
            $text .= $child_element->getText() . ' ';
          }
          elseif (method_exists($child_element, 'getContent')) {
            $text .= $child_element->getContent() . ' ';
          }
        }
      }
      elseif (method_exists($element, 'getText')) {
        $t = $element->getText();
        if (is_string($t)) {
          $text .= $element->getText() . "\n";
        }
        elseif ($t instanceof TextRun) {
          $text .= $t->getText() . "\n";
        }
        else {
          // Ignore it.
        }
      }
    }

    $pages[] = $text;
  }

  return $pages;
}

/**
 * Extract text for each page separately.
 */
function ocha_ai_summarize_extract_pages_from_pdf_ocr($filename, $document_language = 'eng') {
  /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
  $fileSystem = \Drupal::service('file_system');

  // Create temp file location.
  $dir = 'temporary://' . md5($filename);
  $fileSystem->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY || FileSystemInterface::MODIFY_PERMISSIONS);
  $absolute_path = $fileSystem->realpath($dir);

  // Convert PDF to png.
  $command = [
    'gs',
    '-dBATCH',
    '-dFILTERIMAGE',
    '-dNOPAUSE',
    '-sDEVICE=pnggray',
    '-r600',
    '-dUseCropBox',
    '-sOutputFile=' . $absolute_path . '/page-%04d.png',
    $filename,
  ];

  \Drupal::logger('AI Summarize')->info('Convert PDF to PNG: ' . implode(' ', $command));

  $process = new Process($command);
  $process->setTimeout(0);
  $process->setWorkingDirectory($dir);
  $process->run();

  if (!$process->isSuccessful()) {
    \Drupal::logger('AI Summarize')->error('PDF Extraction failed: ' . $process->getErrorOutput());
    return FALSE;
  }

  // Run OCR on the files.
  $files = $fileSystem->scanDirectory($absolute_path, '/png$/');
  asort($files);
  foreach ($files as $file) {
    $command = [
      'tesseract',
      '-l',
      $document_language,
      '--dpi',
      '600',
      $file->uri,
      $file->uri,
    ];

    \Drupal::logger('AI Summarize')->info('PDF Extraction: ' . implode(' ', $command));

    $process = new Process($command);
    $process->setTimeout(0);
    $process->setWorkingDirectory($dir);
    $process->run();

    if (!$process->isSuccessful()) {
      \Drupal::logger('AI Summarize')->error('PDF Extraction failed: ' . $process->getErrorOutput());
      return FALSE;
    }

    $fileSystem->delete($file->uri);
  }

  // Combine all pages into one.
  $files = $fileSystem->scanDirectory($absolute_path, '/png.txt$/');
  asort($files);
  $text = '';
  foreach ($files as $file) {
    $text .= file_get_contents($file->uri);
    $text .= "\n";

    $fileSystem->delete($file->uri);
  }

  return $text;
}

/**
 * Extract text for each page separately.
 */
function ocha_ai_summarize_extract_pages_from_pdf($filename) {
  $pages = [];
  $num_pages = ocha_ai_summarize_get_num_pages($filename);

  foreach (range(1, $num_pages) as $page_num) {
    $command = [
      'pdftotext',
      '-f',
      $page_num,
      '-l',
      $page_num,
      $filename,
      '-',
    ];

    \Drupal::logger('AI Summarize')->info('PDF Extraction : ' . implode(' ', $command));

    $process = new Process($command);
    $process->setTimeout(10);
    $process->run();
    if (!$process->isSuccessful()) {
      \Drupal::logger('AI Summarize')->error('PDF Extraction failed: ' . $process->getErrorOutput());
      return FALSE;
    }

    $output = trim($process->getOutput(), " \t\n\r\0\x0B\x0C");

    // Remove tabs.
    $text = str_replace(["\t"], '', $output);

    // Keep lists as is.
    $text = str_replace([
      "\n➢",
      "\n▪",
      "\n-",
      "\n*",
      "\no\n",
    ], [
      "||||➢",
      "||||▪",
      "||||-",
      "||||*",
      "||||o ",
    ], $text);

    // Two new lines make a paragraph.
    $text = str_replace("\n\n", '|||', $text);

    // Remove single line feeds.
    $text = str_replace("\n", ' ', $text);

    // Re-add lists.
    $text = str_replace('||||', "\n", $text);

    // Re-add paragraphs.
    $text = str_replace('|||', "\n\n", $text);

    $pages[] = $text;
  }

  return $pages;
}

/**
 * Upload file to S3.
 */
function ocha_ai_summarize_upload_to_s3($file_name) {
  $client_options = ocha_ai_summarize_get_aws_client_options();

  $client = new S3Client($client_options);

  $bucket_name = 'ai-summarize-pdfs';
  $key_name = basename($file_name);

  $client->putObject([
    'Bucket' => $bucket_name,
    'Key' => $key_name,
    'SourceFile' => $file_name,
  ]);
}

/**
 * Extract text using AWS Textract.
 */
function ocha_ai_summarize_texttract($file_name) {
  $client_options = ocha_ai_summarize_get_aws_client_options();

  $client = new TextractClient($client_options);

  $bucket_name = 'ai-summarize-pdfs';
  $key_name = basename($file_name);

  $options = [
    'DocumentLocation' => [
      'S3Object' => [
        'Bucket' => $bucket_name,
        'Name' => $key_name,
      ],
    ],
    'FeatureTypes' => [
      'LAYOUT',
    ],
  ];

  $result = $client->startDocumentTextDetection($options);
  $job_id = $result->get('JobId');
  return $job_id;
}

/**
 * Get extracted text using AWS Textract.
 */
function ocha_ai_summarize_texttract_get_text($job_id) {
  $client_options = ocha_ai_summarize_get_aws_client_options();

  $client = new TextractClient($client_options);

  $options = [
    'JobId' => $job_id,
  ];

  $result = $client->GetDocumentTextDetection($options);
  $blocks = $result->get('Blocks');
  $status = $result->get('JobStatus');

  if ($status == 'SUCCEEDED') {
    $output = '';

    // Concatenate.
    foreach ($blocks as $value) {
      if (isset($value['BlockType']) && $value['BlockType']) {
        $blockType = $value['BlockType'];
        if (isset($value['Text']) && $value['Text']) {
          $text = $value['Text'];
          if ($blockType == 'WORD') {
            $output .= ' ' . $text;
          }
          elseif ($blockType == 'LINE') {
            $output .= "\n" . $text;
          }
        }
      }
    }

    $output .= "\n";
    return $output;
  }

  return '';
}

/**
 * Make chat call to OpenAi.
 */
function ocha_ai_summarize_http_call_openai($query) {
  $config = \Drupal::config('ocha_ai_summarize.settings');

  $http_client = \Drupal::httpClient();
  $url = 'https://api.openai.com/v1/chat/completions';

  $headers = [
    'Content-Type' => 'application/json',
    'Authorization' => 'Bearer ' . $config->get('openai_token'),
  ];

  try {
    $response = $http_client->request(
      'POST',
      $url,
      [
        'timeout' => 600,
        'headers' => $headers,
        'json' => $query,
      ],
    );

    $body = $response->getBody() . '';
    return json_decode($body, TRUE);
  }
  catch (ClientException $e) {
    \Drupal::logger('AI - OpenAI')->error($e->getMessage());
  }
  catch (Exception $e) {
    \Drupal::logger('AI - OpenAI')->error($e->getMessage());
  }

  return '';
}

/**
 * Make chat call to Azure.
 */
function ocha_ai_summarize_http_call_azure($messages) {
  $client = ocha_ai_summarize_get_client();

  try {
    $payload = [
      'messages' => $messages,
      'temperature' => 0.0,
      'top_p' => 0.9,
      'max_tokens' => 4000,
    ];

    $response = $client->chat()->create($payload);

    $data = $response->toArray();
    return trim($data['choices'][0]['message']['content'] ?? '');
  }
  catch (ClientException $e) {
    \Drupal::logger('AI - Azure')->error($e->getMessage());
  }
  catch (Exception $e) {
    \Drupal::logger('AI - Azure')->error($e->getMessage());
  }

  return '';
}

/**
 * Get the Azure OpenAI API client.
 *
 * @return \OpenAI\Client
 *   API Client.
 */
function ocha_ai_summarize_get_client(): Client {
  static $client = NULL;

  if (!$client) {
    $config = \Drupal::config('ocha_ai_summarize.settings');
    $endpoint = $config->get('azure_endpoint');
    $api_key = $config->get('azure_apikey');

    $version = '2024-02-15-preview';
    $model = 'gpt-35-turbo-16k';

    // Workaround for https://github.com/openai-php/client/issues/218.
    $stack = HandlerStack::create();
    $stack->push(
      Middleware::mapResponse(function (ResponseInterface $response) use ($model) {
        if (!$response->hasHeader('openai-model')) {
          $response = $response->withHeader('openai-model', $model);
        }
        if (!$response->hasHeader('openai-processing-ms')) {
          $response = $response->withHeader('openai-processing-ms', '1');
        }
        if (!$response->hasHeader('x-request-id')) {
          $response = $response->withHeader('x-request-id', 'abc');
        }
        return $response;
      })
    );
    $guzzle = new GuzzleClient(['handler' => $stack]);

    $client = \OpenAI::factory()
      ->withBaseUri($endpoint)
      ->withHttpHeader('api-key', $api_key)
      ->withQueryParam('api-version', $version)
      ->withHttpClient($guzzle)
      ->make();
  }
  return $client;
}

/**
 * Make chat call to BedRock.
 */
function ocha_ai_summarize_http_call_bedrock($prompt) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $model = $config->get('bedrock_model');

  $client_options = ocha_ai_summarize_get_aws_client_options();

  $bedRock = new BedrockRuntimeClient($client_options);

  $payload = [
    'accept' => 'application/json',
    'body' => json_encode([
      'inputText' => $prompt,
      'textGenerationConfig' => [
        'maxTokenCount' => 4000,
        'stopSequences' => [],
        'temperature' => 0.0,
        'topP' => 0.9,
      ],
    ]),
    'contentType' => 'application/json',
    'modelId' => $model,
  ];

  try {
    /** @var \Aws\Result $response */
    $response = $bedRock->invokeModel($payload);
  }
  catch (\Exception $exception) {
    \Drupal::logger('AI - BedRock')->error($exception->getMessage());
    return '';
  }

  try {
    return json_decode($response->get('body')->getContents(), TRUE);
  }
  catch (\Exception $exception) {
    \Drupal::logger('AI - BedRock')->error($exception->getMessage());
    return '';
  }
}

/**
 * Make chat call to Titan Premier.
 */
function ocha_ai_summarize_http_call_titan_premier($prompt) {
  $model = 'amazon.titan-text-premier-v1:0';
  $client_options = ocha_ai_summarize_get_aws_client_options();

  $bedRock = new BedrockRuntimeClient($client_options);

  $payload = [
    'accept' => 'application/json',
    'body' => json_encode([
      'inputText' => $prompt,
      'textGenerationConfig' => [
        'maxTokenCount' => 3000,
        'stopSequences' => [],
        'temperature' => 0.0,
        'topP' => 0.9,
      ],
    ]),
    'contentType' => 'application/json',
    'modelId' => $model,
  ];

  try {
    /** @var \Aws\Result $response */
    $response = $bedRock->invokeModel($payload);
  }
  catch (\Exception $exception) {
    \Drupal::logger('AI - Titan premier')->error($exception->getMessage());
    return '';
  }

  try {
    return json_decode($response->get('body')->getContents(), TRUE);
  }
  catch (\Exception $exception) {
    \Drupal::logger('AI - Titan premier')->error($exception->getMessage());
    return '';
  }
}

/**
 * Make chat call to Claude.
 */
function ocha_ai_summarize_http_call_claude($prompt) {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $endpoint = $config->get('claude_endpoint');
  $api_key = $config->get('claude_api_key');
  $claude_version = $config->get('claude_version');

  $headers = [
    'Content-Type' => 'application/json',
    'Accept' => 'application/json',
    'anthropic-version' => $claude_version,
    'x-api-key' => $api_key,
  ];

  $body = [
    'model' => 'claude-instant-v1',
    'prompt' => $prompt,
    "stop_sequences" => [
      "\\n\\nHuman:",
    ],
    'temperature' => 0.1,
    'max_tokens_to_sample' => 2500,
  ];

  $http_client = \Drupal::httpClient();

  try {
    $response = $http_client->request(
      'POST',
      $endpoint,
      [
        'timeout' => 600,
        'headers' => $headers,
        'json' => $body,
      ],
    );

    $body = $response->getBody() . '';
    return json_decode($body, TRUE);
  }
  catch (ClientException $e) {
    \Drupal::logger('AI - Claude')->error($e->getMessage());
  }
  catch (Exception $e) {
    \Drupal::logger('AI - Claude')->error($e->getMessage());
  }

  return '';
}

/**
 * Only show block on final step.
 */
function ocha_ai_summarize_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->id() == 'common_design_subtheme_adminfeedbackblock') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (($node instanceof NodeInterface) && !$node->isPublished()) {
      if ($node->isPublished()) {
        return AccessResult::neutral();
      }

      $current_state = $node->moderation_state->value ?? FALSE;
      if ($current_state != 'summarized' && $current_state != 'action_points_created') {
        return AccessResult::forbiddenIf(TRUE)->addCacheableDependency($block);
      }
    }

    return AccessResult::neutral();
  }
}

/**
 * Check token length and truncate if needed.
 */
function ocha_ai_summarize_check_length($text, $bot) {
  $max_tokens = 42000;

  switch ($bot) {
    case 'openai':
      $max_tokens = 3.5 * 16385;
      break;

    case 'azure_trained':
      $max_tokens = 2 * 8192;
      break;

    case 'bedrock':
      $max_tokens = 2 * 42000;
      break;

    case 'amazon_titan_premier':
      $max_tokens = 2 * 3072;
      break;

  }

  $max_tokens = round($max_tokens, 0);

  // 1 token ~= 4 characters.
  if (strlen($text) > $max_tokens) {
    \Drupal::logger('AI - Max tokens - ' . $bot)->warning('Too many tokens needed, string truncated to ' . $max_tokens);
    $text = substr($text, 0, $max_tokens);
  }

  return $text;
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function ocha_ai_summarize_locale_translation_projects_alter(&$projects) {
  $path = \Drupal::moduleHandler()->getModule('ocha_ai_summarize')->getPath();

  $projects['ocha_ai_summarize'] = [
    'name' => 'ocha_ai_summarize',
    'info' => [
      'name' => 'OCHA AI Summarize',
      'package' => 'Other',
      'version' => 'custom',
      'project' => 'ocha_ai_summarize',
      'datestamp' => '0',
      'interface translation server pattern' => $path . '/translations/%language.po',
    ],
    'datestamp' => '0',
    'project_type' => 'module',
    'project_status' => TRUE,
  ];
}

/**
 * Get language name in  a language.
 */
function ocha_ai_summarize_get_lang_name_translated($code) {
  $language = ocha_ai_summarize_get_lang_name($code);
  $output_language = ocha_ai_summarize_get_lang_code($code);

  if ($output_language == 'en') {
    return $language;
  }

  return t('@language', [
    '@language' => $language,
  ], [
    'langcode' => $output_language,
  ])->__toString();
}

/**
 * Get language name.
 */
function ocha_ai_summarize_get_lang_name($code) {
  $code = ocha_ai_summarize_get_lang_code($code);
  $langcodes = \Drupal::languageManager()->getLanguages();

  return $langcodes[$code]->getName();
}

/**
 * Map lang codes from tesseract to Drupal.
 */
function ocha_ai_summarize_get_lang_code($code) {
  $lang_codes = [
    'Arabic' => 'ar',
    'ara' => 'ar',
    'chi_sim' => 'zh-hans',
    'eng' => 'en',
    'fra' => 'fr',
    'spa' => 'es',
    'rus' => 'ru',
  ];

  return $lang_codes[$code] ?? 'en';
}

/**
 * Helper to obtain AWS client options.
 *
 * An array with cedentials and a region. The credentials are either
 * the key and secret from config, or temporary ones via a role.
 *
 * @return array
 *   A keyed array containing AWS client options.
 */
function ocha_ai_summarize_get_aws_client_options() {
  $config = \Drupal::config('ocha_ai_summarize.settings');
  $region = $config->get('aws_bedrock_region');
  $role_arn = $config->get('aws_bedrole_role_arn', NULL);

  if (!empty($role_arn)) {
    $stsClient = new StsClient([
      'region' => $region,
      'version' => 'latest',
    ]);

    $result = $stsClient->AssumeRole([
      'RoleArn' => $role_arn,
      'RoleSessionName' => 'aws-bedrock-ocha-ai-summarize',
    ]);

    $credentials = [
      'key'    => $result['Credentials']['AccessKeyId'],
      'secret' => $result['Credentials']['SecretAccessKey'],
      'token'  => $result['Credentials']['SessionToken'],
    ];
  }
  else {
    $credentials = [
      'key' => $config->get('bedrock_access_key'),
      'secret' => $config->get('bedrock_secret_key'),
    ];
  }

  return [
    'credentials' => $credentials,
    'region' => $region,
  ];
}

/**
 * Helper to retrieve a document file name for the queue items.
 *
 * @return string
 *   A filename.
 */
function ocha_ai_summarize_get_entity_document(EntityInterface $entity) {
  /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $file_item */
  $file_item = $entity->get('field_document')->first() ?? NULL;
  if (empty($file_item)) {
    return NULL;
  }
  /** @var \Drupal\file\Entity\File $file */
  $file = \Drupal::entityTypeManager()->getStorage('file')->load($file_item->getValue()['target_id']);
  if (empty($file)) {
    return NULL;
  }
  return $file->getFilename();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ocha_ai_summarize_user_presave(UserInterface $user) {
  if ($user->isNew()) {
    $parts = explode('@', $user->getInitialEmail());
    if ($parts[1] != 'un.org') {
      return;
    }

    $user->setUsername($user->getInitialEmail());
    $user->activate();
    $user->addRole('document_analyzer');
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ocha_ai_summarize_user_insert(UserInterface $user) {
  $parts = explode('@', $user->getInitialEmail());
  if ($parts[1] != 'un.org') {
    return;
  }

  \Drupal::messenger()->deleteAll();
  \Drupal::messenger()->addMessage(t('Your account has been automatically approved.'));
}

/**
 * Implements hook_mail().
 */
function ocha_ai_summarize_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_user':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }

}

/**
 * Send email when processing is done.
 */
function ocha_ai_summarize_notify_user(NodeInterface $node) {
  /** @var \Drupal\Core\Mail\MailManagerInterface $mail_manager */
  $mail_manager = \Drupal::service('plugin.manager.mail');
  $module = 'ocha_ai_summarize';
  $key = 'notify_user';
  $to = $node->getOwner()->getEmail();
  $langcode = $node->getOwner()->getPreferredLangcode();

  $ai_models = $node->get('field_ai_brain')->getSettings()['allowed_values'];
  $ai_model = $ai_models[$node->get('field_ai_brain')->value];
  $sub_title = $node->type->entity->label();

  $field_name = '';
  $ai_text = '';

  switch ($node->bundle()) {
    case 'summary':
      $field_name = 'field_summary';
      $ai_text = $node->get($field_name)->value;
      break;

    case 'action_points':
      $field_name = 'field_action_points';
      $ai_text = $node->get($field_name)->value;
      break;

  }

  $params['subject'] = t('AI Summarize: @title - has been processed.', [
    '@title' => $node->getTitle(),
  ]);

  if (!empty($ai_text)) {
    $params['message'] = implode("\r\n", [
      t('Your document has been processed by @model.', ['@model' => $ai_model]),
      '',
      t('You can always see your results and provide feedback online here: @link', [
        '@link' => $node->toUrl()->setAbsolute()->toString(),
      ]),
      '',
      $sub_title,
      '',
      $ai_text,
    ]);
  }
  else {
    $params['message'] = implode("\r\n", [
      t('Your document has been processed by @model but was unable to generate it.', ['@model' => $ai_model]),
      '',
      t('You can always see your results and provide feedback online here: @link', [
        '@link' => $node->toUrl()->setAbsolute()->toString(),
      ]),
    ]);
  }

  $mail_manager->mail($module, $key, $to, $langcode, $params);
}

/**
 * Track execution times.
 */
function ocha_ai_summarize_log_time(string $action, int $nid, int $ms) : void {
  \Drupal::database()
    ->insert('ocha_ai_summarize_log_time')
    ->fields([
      'nid' => $nid,
      'action' => $action,
      'duration' => $ms,
    ])
    ->execute();
}

/**
 * Track execution times of text extraction.
 */
function ocha_ai_summarize_log_time_extract(int $nid, float $ms) : void {
  ocha_ai_summarize_log_time('extract_text', $nid, round($ms));
}

/**
 * Track execution times of summarize.
 */
function ocha_ai_summarize_log_time_summarize(int $nid, float $ms) : void {
  ocha_ai_summarize_log_time('summarize', $nid, round($ms));
}

/**
 * Track execution times of action points.
 */
function ocha_ai_summarize_log_time_action_points(int $nid, float $ms) : void {
  ocha_ai_summarize_log_time('action_point', $nid, round($ms));
}

/**
 * Get execution times for a node.
 */
function ocha_ai_summarize_log_time_get($nid) : array {
  return \Drupal::database()
    ->select('ocha_ai_summarize_log_time')
    ->fields('ocha_ai_summarize_log_time')
    ->condition('nid', $nid)
    ->execute()
    ->fetchAll();
}

/**
 * Generate weekly AI tagging statistics.
 */
function ocha_ai_summarize_get_weekly_stats() {
  $types = [
    'summary',
    'action_points',
  ];

  $data = [
    'totals' => [
      'documents' => 0,
      'users' => 0,
    ],
  ];

  foreach ($types as $type) {
    $data[$type] = [
      'created' => 0,
      'completed' => 0,
      'per_user' => 0,
      'per_model' => [],
      'input_lang' => [],
      'output_lang' => [],
      'translated' => 0,
      'untranslated' => 0,
      'one_summary' => 0,
      'two_five_summaries' => 0,
      'more_summaries' => 0,
      'score' => 0,
      'thumbs' => [
        'down' => 0,
        'neutral' => 0,
        'up' => 0,
      ],
      'timings' => [],
    ];
  }

  $average = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_created = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_completed = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_user = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_model = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_input_lang = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_output_lang = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_translated = [
    'summary' => [],
    'action_points' => [],
  ];
  $docs_untranslated = [
    'summary' => [],
    'action_points' => [],
  ];

  $connection = \Drupal::database();

  $sql = "
    SELECT
      n.nid,
      n.uid,
      n.type,
      b.field_ai_brain_value as brain,
      i.field_document_language_value as input_lang,
      o.field_output_language_value as output_lang,
      m.moderation_state,
      r.field_rating_value as rating,
      t.field_thumbs_value as thumbs
    FROM node_field_data AS n
      INNER JOIN content_moderation_state_field_data AS m ON n.nid = m.content_entity_id
      LEFT JOIN node__field_ai_brain AS b ON n.nid = b.entity_id
      LEFT JOIN node__field_document_language AS i ON n.nid = i.entity_id
      LEFT JOIN node__field_output_language AS o ON n.nid = o.entity_id
      LEFT JOIN comment_field_data c ON n.nid = c.entity_id AND c.entity_type = 'node'
      LEFT JOIN comment__field_rating AS r ON c.cid = r.entity_id
      LEFT JOIN comment__field_thumbs AS t ON c.cid = t.entity_id
    WHERE n.type IN ('action_points', 'summary')
      AND n.created >= UNIX_TIMESTAMP(DATE_SUB(DATE(NOW()), INTERVAL DAYOFWEEK(NOW()) + 6 DAY))
      AND n.created < UNIX_TIMESTAMP(DATE_SUB(DATE(NOW()), INTERVAL DAYOFWEEK(NOW()) - 1 DAY))
    ORDER BY n.nid
  ";

  $records = $connection->query($sql)->fetchAll(\PDO::FETCH_ASSOC);

  if (empty($records)) {
    return $data;
  }

  // Prepare data.
  foreach ($records as $record) {
    $docs_created[$record['type']][] = $record['nid'];
    $docs_user[$record['type']][$record['uid']][] = $record['nid'];
    $docs_model[$record['type']][$record['brain']][] = $record['nid'];
    $docs_input_lang[$record['type']][$record['input_lang']][] = $record['nid'];
    $docs_output_lang[$record['type']][$record['output_lang']][] = $record['nid'];

    $docs_created[$record['type']] = array_unique($docs_created[$record['type']]);
    $docs_user[$record['type']][$record['uid']] = array_unique($docs_user[$record['type']][$record['uid']]);
    $docs_model[$record['type']][$record['brain']] = array_unique($docs_model[$record['type']][$record['brain']]);
    $docs_input_lang[$record['type']][$record['input_lang']] = array_unique($docs_input_lang[$record['type']][$record['input_lang']]);
    $docs_output_lang[$record['type']][$record['output_lang']] = array_unique($docs_output_lang[$record['type']][$record['output_lang']]);

    if ($record['input_lang'] == $record['output_lang']) {
      $docs_translated[$record['type']][] = $record['nid'];
      $docs_translated[$record['type']] = array_unique($docs_translated[$record['type']]);
    }
    else {
      $docs_untranslated[$record['type']][] = $record['nid'];
      $docs_untranslated[$record['type']] = array_unique($docs_untranslated[$record['type']]);
    }

    if (!empty($record['rating'])) {
      $average[$record['type']][] = $record['rating'];
    }

    if (!empty($record['thumbs'])) {
      $data[$record['type']]['thumbs'][$record['thumbs']]++;
    }

    switch ($record['moderation_state']) {
      case 'summarized':
      case 'action_points_created':
        $docs_completed[$record['type']][] = $record['nid'];
        $docs_completed[$record['type']] = array_unique($docs_completed[$record['type']]);

    }
  }

  // Totals.
  $data['totals']['documents'] = count($docs_created['summary']) + count($docs_created['action_points']);
  $data['totals']['users'] = count(array_unique(array_merge(array_keys($docs_user['summary']), array_keys($docs_user['action_points']))));

  // Data per type.
  foreach ($types as $type) {
    $data[$type]['created'] = count($docs_created[$type]);
    $data[$type]['completed'] = count($docs_completed[$type]);
    if ($data[$type]['completed'] > 0) {
      $data[$type]['per_user'] = count($docs_completed[$type]) / count(($docs_user[$type]));
      foreach ($docs_model[$type] as $index => $docs) {
        $data[$type]['per_model'][$index] = count($docs);
      }
      foreach ($docs_input_lang[$type] as $index => $docs) {
        $data[$type]['input_lang'][$index] = count($docs);
      }
      foreach ($docs_output_lang[$type] as $index => $docs) {
        $data[$type]['output_lang'][$index] = count($docs);
      }

      $data[$type]['translated'] = count($docs_translated[$type]);
      $data[$type]['untranslated'] = count($docs_untranslated[$type]);

      $data[$type]['one_summary'] = count(array_filter($docs_user[$type], function ($a) {
        return count($a) == 1;
      }));
      $data[$type]['two_five_summaries'] = count(array_filter($docs_user[$type], function ($a) {
        return count($a) > 1 && count($a) < 5;
      }));
      $data[$type]['more_summaries'] = count(array_filter($docs_user[$type], function ($a) {
        return count($a) > 5;
      }));
    }

    if (count($average[$type])) {
      $data[$type]['score'] = array_sum($average[$type]) / count($average[$type]);
    }

    // Get average timings.
    if (!empty($docs_created[$type])) {
      $records = $connection->query("
        SELECT action, AVG(duration) AS duration
        FROM ocha_ai_summarize_log_time
        WHERE nid in (" . implode(',', $docs_created[$type]) . ")
        GROUP BY action;
      ")->fetchAll(\PDO::FETCH_ASSOC);

      foreach ($records as $record) {
        $data[$type]['timings'][$record['action']] = (int) $record['duration'];
      }
    }
  }

  return $data;
}
